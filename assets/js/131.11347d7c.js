(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{527:function(t,e,r){"use strict";r.r(e);var a=r(42),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),r("h2",{attrs:{id:"介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),r("p",[t._v("在构建可靠的应用程序时，测试可以在个人或团队构建新功能，重构代码，修复错误等的能力中发挥关键作用。尽管有很多关于测试的想法，但在本书中经常讨论三类。Web 应用程序的上下文：")]),t._v(" "),r("ul",[r("li",[t._v("单元测试")]),t._v(" "),r("li",[t._v("组件测试")]),t._v(" "),r("li",[t._v("端到端 (E2E) 测试")])]),t._v(" "),r("p",[t._v("本部分旨在为导航测试生态系统以及为 Vue 应用程序或组件库选择正确的工具提供指导。")]),t._v(" "),r("h2",{attrs:{id:"单元测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[t._v("#")]),t._v(" 单元测试")]),t._v(" "),r("h3",{attrs:{id:"介绍-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#介绍-2"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),r("p",[t._v("单元测试允许你单独测试代码的各个单元。单元测试的目的是为开发人员提供对代码的信心。通过编写全面、有意义的测试，你可以获得这样的信心：随着新功能的构建或代码的重构，你的应用程序将保持功能性和稳定性。")]),t._v(" "),r("p",[t._v("单元测试 Vue 应用程序与测试其他类型的应用程序没有显著区别。")]),t._v(" "),r("h3",{attrs:{id:"选择你的框架"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#选择你的框架"}},[t._v("#")]),t._v(" 选择你的框架")]),t._v(" "),r("p",[t._v("由于单元测试建议通常与框架无关，所以在评估哪个单元测试工具最适合你的应用程序时，请记住以下一些基本准则。")]),t._v(" "),r("h4",{attrs:{id:"一流的错误报告"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一流的错误报告"}},[t._v("#")]),t._v(" 一流的错误报告")]),t._v(" "),r("p",[t._v("当测试失败时，至关重要的是你的单元测试框架必须提供有用的错误。这是断言库的工作。带有高质量错误消息的断言有助于最大程度地减少调试问题所需的时间。断言库除了简单地告诉你什么测试失败外，还提供了有关测试失败原因的上下文，例如，预期的结果与收到的结果。")]),t._v(" "),r("p",[t._v("一些单元测试框架 (如 Jest) 包括断言库。其他 (如 Mocha) 则要求你单独安装断言库 (通常为 Chai)。")]),t._v(" "),r("h4",{attrs:{id:"活跃的社区和团队"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#活跃的社区和团队"}},[t._v("#")]),t._v(" 活跃的社区和团队")]),t._v(" "),r("p",[t._v("由于大多数单元测试框架都是开源的，所以对于一些长期维护测试并需要确保项目得到积极维护的团队来说，活跃的社区至关重要。此外，拥有活跃的社区的好处是，每当遇到问题时，都会提供更多的支持。")]),t._v(" "),r("h3",{attrs:{id:"框架"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#框架"}},[t._v("#")]),t._v(" 框架")]),t._v(" "),r("p",[t._v("虽然生态系统中有许多工具，但这里有一些 Vue.js 生态系统中正在使用的常见单元测试工具。")]),t._v(" "),r("h4",{attrs:{id:"jest"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jest"}},[t._v("#")]),t._v(" Jest")]),t._v(" "),r("p",[t._v("Jest 是一个专注于简单性的 JavaScript 测试框架。它的独特功能之一是能够对测试进行快照，以提供另一种验证应用程序单元的方法。")]),t._v(" "),r("p",[r("strong",[t._v("资源：")])]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://jestjs.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jest 官网"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://cli.vuejs.org/core-plugins/unit-jest.html",target:"_blank",rel:"noopener noreferrer"}},[t._v(" Vue 2 官方 CLI Plugin - Jest"),r("OutboundLink")],1)])]),t._v(" "),r("h4",{attrs:{id:"mocha"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mocha"}},[t._v("#")]),t._v(" Mocha")]),t._v(" "),r("p",[t._v("Mocha 是专注于灵活性的 JavaScript 测试框架。由于具有这种灵活性，因此你可以选择不同的库来实现其他常见功能，例如监视 (例如 Sinon) 和断言 (例如 Chai)。Mocha 的另一个独特功能是，除了 Node.js 之外，它还可以在浏览器中执行测试。")]),t._v(" "),r("p",[r("strong",[t._v("资源：")])]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://mochajs.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mocha 官网"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://cli.vuejs.org/core-plugins/unit-mocha.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue 官方 CLI Plugin - Mocha"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"组件测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#组件测试"}},[t._v("#")]),t._v(" 组件测试")]),t._v(" "),r("h3",{attrs:{id:"介绍-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#介绍-3"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),r("p",[t._v("要测试大多数 Vue 组件，必须将它们挂载到 DOM (虚拟或真实) 上，才能完全断言它们正在工作。这是另一个与框架无关的概念。因此，创建了组件测试框架，让用户能够以可靠的方式完成这项工作，同时还提供了 Vue 特有的便利性，如对 Vuex、Vue 路由器和其他 Vue 插件的集成。")]),t._v(" "),r("h3",{attrs:{id:"选择你的框架-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#选择你的框架-2"}},[t._v("#")]),t._v(" 选择你的框架")]),t._v(" "),r("p",[t._v("以下部分提供了在评估哪个组件测试框架最适合你的应用程序时需要记住的事项。")]),t._v(" "),r("h4",{attrs:{id:"与-vue-生态系统的最佳兼容性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#与-vue-生态系统的最佳兼容性"}},[t._v("#")]),t._v(" 与 Vue 生态系统的最佳兼容性")]),t._v(" "),r("p",[t._v("毋容置疑，第一个标准之一就是组件测试库应该尽可能与 Vue 生态系统兼容。虽然这看起来很全面，但需要记住的一些关键集成领域包括单文件组件 (sfc)、Vuex、Vue 路由器以及应用程序所依赖的任何其他特定于 Vue 的插件。")]),t._v(" "),r("h4",{attrs:{id:"一流的错误报告-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一流的错误报告-2"}},[t._v("#")]),t._v(" 一流的错误报告")]),t._v(" "),r("p",[t._v("当测试失败时，组件测试框架必须提供有用的错误日志，以帮助最小化调试问题所需的时间。除了简单地告诉你什么测试失败之外，他们还应该提供测试失败原因的上下文，例如，预期结果与收到结果的对比。")]),t._v(" "),r("h3",{attrs:{id:"推荐"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#推荐"}},[t._v("#")]),t._v(" 推荐")]),t._v(" "),r("h4",{attrs:{id:"vue-测试库-testing-library-vue"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue-测试库-testing-library-vue"}},[t._v("#")]),t._v(" Vue 测试库 (@testing-library/vue)")]),t._v(" "),r("p",[t._v("Vue 测试库是一组工具，专注于测试组件，而不依赖实现细节。考虑到可访问性，它的方法也使重构变得轻而易举。")]),t._v(" "),r("p",[t._v("它的指导原则是，与软件使用方式相似的测试越多，它们提供的可信度就越高。")]),t._v(" "),r("p",[r("strong",[t._v("资源：")])]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://testing-library.com/docs/vue-testing-library/intro",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue 测试库官网"),r("OutboundLink")],1)])]),t._v(" "),r("h4",{attrs:{id:"vue-测试工具"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue-测试工具"}},[t._v("#")]),t._v(" Vue 测试工具")]),t._v(" "),r("p",[t._v("Vue Test Utils 是官方的低级组件测试库，它是为用户提供对 Vue 特定 api 的访问而编写的。如果你不熟悉测试 Vue 应用程序，我们建议你使用 Vue 测试库，它是 Vue Test Utils 的抽象。")]),t._v(" "),r("p",[r("strong",[t._v("资源")])]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://vue-test-utils.vuejs.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue Test Utils 官方文档"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://lmiller1990.github.io/vue-testing-handbook/#what-is-this-guide",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue Testing 说明书"),r("OutboundLink")],1),t._v(" by Lachlan Miller")])]),t._v(" "),r("h2",{attrs:{id:"端到端-e2e-测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#端到端-e2e-测试"}},[t._v("#")]),t._v(" 端到端 (E2E) 测试")]),t._v(" "),r("h3",{attrs:{id:"介绍-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#介绍-4"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),r("p",[t._v("虽然单元测试为开发人员提供了一定程度的信心，但是单元测试和组件测试在部署到生产环境时提供应用程序整体覆盖的能力是有限的。因此，端到端 (E2E) 测试提供了一个可以说是应用程序最重要的方面的覆盖范围：当用户实际使用你的应用程序时会发生什么。")]),t._v(" "),r("p",[t._v("换句话说，E2E 测试验证应用程序中的所有层。这不仅包括你的前端代码，还包括所有相关的后端服务和基础设施，它们更能代表你的用户所处的环境。通过测试用户操作如何影响应用程序，E2E 测试通常是提高应用程序是否正常运行的信心的关键。")]),t._v(" "),r("h3",{attrs:{id:"选择你的框架-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#选择你的框架-3"}},[t._v("#")]),t._v(" 选择你的框架")]),t._v(" "),r("p",[t._v("虽然 web 上的端到端 (E2E) 测试因不可靠 (不稳定) 测试和减慢开发过程而名声扫地，但现代 E2E 工具在创建更可靠、交互和有用的测试方面取得了长足进步。在选择 E2E 测试框架时，以下几节提供了一些指导，指导你在为应用程序选择测试框架时要记住的事项。")]),t._v(" "),r("h4",{attrs:{id:"跨浏览器测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跨浏览器测试"}},[t._v("#")]),t._v(" 跨浏览器测试")]),t._v(" "),r("p",[t._v("端到端 (E2E) 测试的一个主要优点是它能够跨多个浏览器测试应用程序。虽然 100%的跨浏览器覆盖率似乎是可取的，但需要注意的是，跨浏览器测试会减少团队资源的回报，因为持续运行这些资源需要额外的时间和机器功率。因此，在选择应用程序需要的跨浏览器测试数量时，必须注意这种权衡。")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[t._v("最近，针对浏览器特定问题的一个新发展是，针对不常用的浏览器 (如：< IE11、旧版 Safari 等) 使用应用程序监视和错误报告工具 (如：Sentry、LogRocket 等)。")])]),t._v(" "),r("h4",{attrs:{id:"更快的反馈路径"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#更快的反馈路径"}},[t._v("#")]),t._v(" 更快的反馈路径")]),t._v(" "),r("p",[t._v("端到端 (E2E) 测试和开发的主要问题之一是运行整个套件需要很长时间。通常，这只在持续集成和部署 (CI/CD) 管道中完成。现代的 E2E 测试框架通过添加类似并行化的特性来帮助解决这个问题，这使得 CI/CD 管道的运行速度通常比以前快。此外，在本地开发时，有选择地为正在处理的页面运行单个测试的能力，同时还提供测试的热重新加载，这有助于提高开发人员的工作流程和工作效率。")]),t._v(" "),r("h4",{attrs:{id:"一流的调试经验"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一流的调试经验"}},[t._v("#")]),t._v(" 一流的调试经验")]),t._v(" "),r("p",[t._v("虽然开发人员传统上依赖于在终端窗口中扫描日志来帮助确定测试中出了什么问题，但现代端到端 (E2E) 测试框架允许开发人员利用他们已经熟悉的工具，例如浏览器开发工具。")]),t._v(" "),r("h3",{attrs:{id:"推荐-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#推荐-2"}},[t._v("#")]),t._v(" 推荐")]),t._v(" "),r("p",[t._v("虽然生态系统中有许多工具，但以下是一些常用的端到端 (E2E) 测试框架，它们在 Vue.js 版生态系统。")]),t._v(" "),r("h4",{attrs:{id:"cypress-io"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cypress-io"}},[t._v("#")]),t._v(" Cypress.io")]),t._v(" "),r("p",[t._v("Cypress.io 是一个测试框架，旨在通过使开发人员能够可靠地测试他们的应用程序，同时提供一流的开发人员体验来提高开发人员的生产率。")]),t._v(" "),r("p",[r("strong",[t._v("资源：")])]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.cypress.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cypress 官网"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://cli.vuejs.org/core-plugins/e2e-cypress.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue 官方 CLI Cypress Plugin"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/testing-library/cypress-testing-library",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cypress 测试库"),r("OutboundLink")],1)])]),t._v(" "),r("h4",{attrs:{id:"nightwatch-js"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nightwatch-js"}},[t._v("#")]),t._v(" Nightwatch.js")]),t._v(" "),r("p",[t._v("Nightwatch.js 是一个端到端测试框架，可用于测试 web 应用程序和网站，以及节点。js 单元和集成测试。")]),t._v(" "),r("p",[r("strong",[t._v("资源：")])]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://nightwatchjs.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nightwatch 官网"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://cli.vuejs.org/core-plugins/e2e-nightwatch.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue 官方 CLI Nightwatch Plugin"),r("OutboundLink")],1)])]),t._v(" "),r("h4",{attrs:{id:"puppeteer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#puppeteer"}},[t._v("#")]),t._v(" Puppeteer")]),t._v(" "),r("p",[t._v("Puppeteer 是一个 Node 库，它提供一个高级 API 来控制浏览器，并可以与其他测试运行程序 (例如 Jest) 配对来测试你的应用程序。")]),t._v(" "),r("p",[r("strong",[t._v("资源：")])]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://pptr.dev",target:"_blank",rel:"noopener noreferrer"}},[t._v("Puppeteer's 官网"),r("OutboundLink")],1)])]),t._v(" "),r("h4",{attrs:{id:"testcafe"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#testcafe"}},[t._v("#")]),t._v(" TestCafe")]),t._v(" "),r("p",[t._v("TestCafe 是一个 Node.js 基于端到端框架，旨在提供简单的设置，以便开发人员能够专注于创建易于编写和可靠的测试。")]),t._v(" "),r("p",[r("strong",[t._v("资源：")])]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://devexpress.github.io/testcafe/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TestCafe's 官网"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);